syntax = "proto3";

package opendut.types.peer.configuration;

import "opendut/types/cluster/cluster.proto";
import "opendut/types/peer/executor.proto";
import "opendut/types/util/net.proto";
import "opendut/types/util/uuid.proto";

message PeerConfiguration {
  opendut.types.peer.executor.ExecutorDescriptors executors = 1;
  optional opendut.types.cluster.ClusterAssignment cluster_assignment = 2;
  opendut.types.peer.configuration.PeerNetworkConfiguration network = 3;
}

message PeerNetworkConfiguration {
  opendut.types.util.NetworkInterfaceName bridge_name = 1;
}



// Configuration sent from CARL to Peer
message PeerConfiguration2 {
  repeated PeerConfigurationParameterTargetExecutor executors = 1;
  //TODO migrate more fields
}

message PeerConfigurationParameterTargetExecutor {
  PeerConfigurationParameterTarget target = 1;
  opendut.types.peer.executor.ExecutorDescriptor executor = 2;
}


message PeerConfigurationParameterTarget {
   PeerConfigurationParameterId id = 1;
   repeated PeerConfigurationParameterId dependencies = 2;
   oneof target {
     PeerConfigurationParameterPresent present = 11;
     PeerConfigurationParameterAbsent absent = 12;
   }
}


// Feedback sent from Peer to CARL, how far it has applied PeerConfiguration
message PeerState {
  repeated PeerConfigurationParameterStateExecutor executors = 1;
}

message PeerConfigurationParameterStateExecutor {
  PeerConfigurationParameterState state = 1;
  opendut.types.peer.executor.ExecutorDescriptor executor = 2;
}

message PeerConfigurationParameterState {
  PeerConfigurationParameterId id = 1;
  oneof state {
    PeerConfigurationParameterPresent present = 11;
    PeerConfigurationParameterAbsent absent = 12;
    PeerConfigurationParameterWaitingForDependencies waiting_for_dependencies = 13;
    PeerConfigurationParameterError error = 14;
  }
}


// Representation from CARL towards UI of the PeerState
message PeerConfigurationParameterStatusReport {
  PeerConfigurationParameterId id = 1;
  oneof state {
    PeerConfigurationParameterPresent present = 11;
    PeerConfigurationParameterCreating creating = 12;
    PeerConfigurationParameterAbsent absent = 13;
    PeerConfigurationParameterRemoving removing = 14;
    PeerConfigurationParameterWaitingForDependencies waiting_for_dependencies = 15;
    PeerConfigurationParameterError error = 16;
  }
}


// General messages
message PeerConfigurationParameterId {
  opendut.types.util.Uuid uuid = 1;
}

message PeerConfigurationParameterPresent {}
message PeerConfigurationParameterAbsent {}
message PeerConfigurationParameterCreating {}
message PeerConfigurationParameterRemoving {}
message PeerConfigurationParameterWaitingForDependencies {
  repeated PeerConfigurationParameterId incomplete_dependencies = 1;
}

message PeerConfigurationParameterError {
  oneof error {
    PeerConfigurationParameterErrorCreatingFailed creating_failed = 1;
    PeerConfigurationParameterErrorRemovingFailed removing_failed = 2;
  }
}
message PeerConfigurationParameterErrorCreatingFailed {
  oneof error {
    UnclassifiedError unclassified = 1;
  }
}
message PeerConfigurationParameterErrorRemovingFailed {
  oneof error {
    UnclassifiedError unclassified = 1;
  }
}
message UnclassifiedError {
  string message = 1;
}
